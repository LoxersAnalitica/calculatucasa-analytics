import React, { useMemo, useState, useEffect } from 'react';
import { StatsCard } from '@/components/ui/StatsCard';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { TradingChart } from '@/components/charts/TradingChart';
import { 
  DollarSign, 
  Home, 
  Building, 
  Target, 
  Eye, 
  Clock,
  TrendingUp,
  TrendingDown 
} from 'lucide-react';
import { 
  ResponsiveContainer, 
  BarChart, 
  Bar, 
  RadarChart, 
  PolarGrid, 
  PolarAngleAxis, 
  PolarRadiusAxis, 
  Radar, 
  CartesianGrid, 
  XAxis, 
  YAxis, 
  Tooltip, 
  Legend,
  LineChart,
  Line 
} from 'recharts';
import { formatEuro, formatNumber, trendArrow } from '@/utils/formatters';
// Importaci√≥n de nuestras funciones de Google Sheets
import { getOverviewMetrics, getHistoricoData } from '@/lib/googleSheets';

interface OverviewSectionProps {
  baseData: any;
  historico: any;
}

export const OverviewSection: React.FC<OverviewSectionProps> = ({ baseData: fallbackData, historico: fallbackHistorico }) => {
  const [timeframe, setTimeframe] = useState<'1y' | '2y' | '5y' | 'all'>('2y');
  
  // Estado para datos reales de Google Sheets
  const [realData, setRealData] = useState(null);
  const [historicoReal, setHistoricoReal] = useState(null);
  const [loading, setLoading] = useState(true);
  // Estado para datos de la gr√°fica
  const [allHistoricalData, setAllHistoricalData] = useState([]);

  // Funci√≥n para cargar datos reales
  useEffect(() => {
    const loadRealData = async () => {
      try {
        setLoading(true);
        console.log('üîÑ Loading real data from Google Sheets...');
        
        // Cargar m√©tricas del Overview (fila 8 de hoja M√©tricas)
        const overviewMetrics = await getOverviewMetrics();
        
        // Cargar datos hist√≥ricos (hoja Hist√≥rico)
        const historicoData = await getHistoricoData();
        
        if (overviewMetrics) {
          setRealData(overviewMetrics);
          console.log('‚úÖ Real overview data loaded:', overviewMetrics);
        }
        
        if (historicoData) {
          setHistoricoReal(historicoData);
          console.log('‚úÖ Real historico data loaded:', historicoData);
        }
        
      } catch (error) {
        console.error('‚ùå Error loading real data:', error);
        // Si hay error, seguimos con datos fallback
      } finally {
        setLoading(false);
      }
    };

    loadRealData();
  }, []);

  // Usar datos reales si est√°n disponibles, sino usar fallback
  const baseData = realData || fallbackData;
  const historico = historicoReal || fallbackHistorico;

  // C√°lculos de trends con datos reales
  const priceTrend = realData ? 
    trendArrow(realData.precioM2 * 0.98, realData.precioM2) : 
    trendArrow(7120, 7200);
    
  const stockTrend = realData ? 
    trendArrow(realData.viviendasEnVenta * 0.99, realData.viviendasEnVenta) : 
    trendArrow(1175, 1167);
    
  const leadsTrend = realData ? 
    trendArrow(realData.leadsAnuncio * 0.98, realData.leadsAnuncio) : 
    trendArrow(9.0, 9.2);

  // Generar datos hist√≥ricos simulados (fallback)
  const generateExtendedData = () => {
    const quarters = [];
    const startYear = 2015;
    const endYear = 2025;
    
    for (let year = startYear; year <= endYear; year++) {
      for (let q = 1; q <= 4; q++) {
        if (year === 2025 && q > 1) break; // Solo Q1-2025
        
        const basePrice = 5500;
        const growth = Math.pow(1.02, (year - startYear) * 4 + q - 1);
        const noise = (Math.random() - 0.5) * 200;
        
        quarters.push({
          trimestre: `Q${q}-${year}`,
          valor: Math.round(basePrice * growth + noise),
          year,
          quarter: q
        });
      }
    }
    return quarters;
  };

  // Efecto para actualizar datos de gr√°fica cuando lleguen los datos reales
  useEffect(() => {
    console.log('üîç DEBUG: historicoReal changed:', historicoReal);
    console.log('üîç DEBUG: historicoReal exists?', !!historicoReal);
    console.log('üîç DEBUG: precioEvolucion exists?', !!historicoReal?.precioEvolucion);
    console.log('üîç DEBUG: precioEvolucion length:', historicoReal?.precioEvolucion?.length);
    
    if (historicoReal && historicoReal.precioEvolucion && historicoReal.precioEvolucion.length > 0) {
      console.log('üìà Using REAL historical data for chart!');
      console.log('üîç DEBUG: First 3 precio items:', historicoReal.precioEvolucion.slice(0, 3));
      
      const realData = historicoReal.precioEvolucion.map(item => ({
        trimestre: item.trimestre,
        valor: item.precio,
        year: parseInt(item.trimestre.split('-')[0]), // Cambiar de [1] a [0] porque el formato es 2015-Q1
        quarter: parseInt(item.trimestre.split('Q')[1]) // Esto est√° correcto
      }));
      
      console.log('üîç DEBUG: Processed real data (first 3):', realData.slice(0, 3));
      console.log('üîç DEBUG: Total processed items:', realData.length);
      console.log('üîç DEBUG: Sample year parsing:', realData[0]?.trimestre, '‚Üí Year:', parseInt(realData[0]?.trimestre.split('-')[0]), 'Quarter:', parseInt(realData[0]?.trimestre.split('Q')[1]));
      setAllHistoricalData(realData);
    } else {
      console.log('üìä Using SIMULATED data for chart');
      const simulatedData = generateExtendedData();
      console.log('üîç DEBUG: Simulated data length:', simulatedData.length);
      setAllHistoricalData(simulatedData);
    }
  }, [historicoReal]);
  
  const getFilteredData = () => {
    if (!allHistoricalData || allHistoricalData.length === 0) {
      console.log('üîç DEBUG: No allHistoricalData available');
      return [];
    }
    
    console.log('üîç DEBUG: allHistoricalData sample:', allHistoricalData.slice(0, 3));
    console.log('üîç DEBUG: allHistoricalData length:', allHistoricalData.length);
    
    let startYear = 2015;
    let startQuarter = 1;
    
    switch (timeframe) {
      case '1y':
        startYear = 2024;
        startQuarter = 1;
        break;
      case '2y':
        startYear = 2023;
        startQuarter = 1;
        break;
      case '5y':
        startYear = 2020;
        startQuarter = 1;
        break;
      case 'all':
      default:
        startYear = 2015;
        startQuarter = 1;
    }
    
    const filtered = allHistoricalData.filter(item => {
      // Debug para entender por qu√© se filtran mal
      const itemYear = item.year;
      const itemQuarter = item.quarter;
      const shouldInclude = itemYear > startYear || (itemYear === startYear && itemQuarter >= startQuarter);
      
      if (!shouldInclude) {
        console.log('üîç DEBUG: Filtering out:', item.trimestre, 'Year:', itemYear, 'Q:', itemQuarter);
      }
      
      return shouldInclude;
    });
    
    console.log('üîç DEBUG: Filtered data length:', filtered.length);
    console.log('üîç DEBUG: Timeframe:', timeframe, 'StartYear:', startYear);
    console.log('üîç DEBUG: First 3 filtered items:', filtered.slice(0, 3));
    
    return filtered;
  };

  const filteredPriceData = getFilteredData();
  console.log('üîç DEBUG: filteredPriceData length:', filteredPriceData.length);
  console.log('üîç DEBUG: filteredPriceData first 3:', filteredPriceData.slice(0, 3));
  
  // C√°lculo de variaci√≥n vs 2007 (precrisis) - con datos reales
  const precio2007 = 6800; // Precio estimado en 2007
  const precioActual = realData ? realData.precioM2 : baseData.precio_m2;
  const variacionVs2007 = ((precioActual - precio2007) / precio2007) * 100;

  // Datos para Stock vs Leads - con datos reales (corregido para usar media)
  const stockLeadsData = historicoReal && historicoReal.stockTotal && historicoReal.stockTotal.length > 0 ? 
    historicoReal.stockTotal.slice(-8).map((item, index) => {
      // Obtener d√≠as activos correspondientes (ya es media de los 6 barrios)
      const diasActivosItem = historicoReal.diasActivos[historicoReal.diasActivos.length - 8 + index];
      
      return {
        trimestre: item.trimestre,
        stock: item.stock,
        leads: diasActivosItem ? diasActivosItem.dias : 0 // Ya es media, no necesita divisi√≥n
      };
    }) :
    historico.stock?.map((item: any, index: number) => ({
      trimestre: item.trimestre,
      stock: item.valor,
      leads: historico.leads_por_anuncio[index]?.valor || 0
    })) || [];

  // Datos para hist√≥rico de leads - con datos reales (ya es media)
  const leadsHistorico = historicoReal && historicoReal.diasActivos && historicoReal.diasActivos.length > 0 ?
    historicoReal.diasActivos.slice(-8).map(item => ({
      trimestre: item.trimestre,
      leads: item.dias // Ya es media de los 6 barrios desde googleSheets.js
    })) :
    [
      { trimestre: 'Q2-2023', leads: 8.2 },
      { trimestre: 'Q3-2023', leads: 8.5 },
      { trimestre: 'Q4-2023', leads: 8.8 },
      { trimestre: 'Q1-2024', leads: 9.1 },
      { trimestre: 'Q2-2024', leads: 8.9 },
      { trimestre: 'Q3-2024', leads: 9.3 },
      { trimestre: 'Q4-2024', leads: 9.0 },
      { trimestre: 'Q1-2025', leads: 9.2 }
    ];

  const radarData = [
    { subject: 'Liquidez', A: baseData.liquidez_mercado || 8.5, fullMark: 10 },
    { subject: 'Demanda', A: 9.1, fullMark: 10 },
    { subject: 'Velocidad', A: 8.5, fullMark: 10 },
    { subject: 'Rating', A: baseData.rating || 8.2, fullMark: 10 },
    { subject: 'Valor', A: 8.8, fullMark: 10 }
  ];

  // Mostrar loading mientras cargan los datos
  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, i) => (
            <div key={i} className="bg-slate-800/50 border-slate-700 border rounded-lg p-6 animate-pulse">
              <div className="h-4 bg-slate-700 rounded w-3/4 mb-2"></div>
              <div className="h-8 bg-slate-700 rounded w-1/2"></div>
            </div>
          ))}
        </div>
        <div className="text-center text-slate-400">
          Cargando datos reales desde Google Sheets...
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Indicador de datos reales */}
      {realData && (
        <div className="bg-emerald-900/20 border border-emerald-700/50 rounded-lg p-3">
          <p className="text-emerald-400 text-sm text-center">
            ‚úÖ Datos actualizados desde Google Sheets - √öltima actualizaci√≥n: {new Date().toLocaleDateString()}
          </p>
        </div>
      )}

      {/* KPI Cards Grid - con datos reales */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <StatsCard
          title="Viviendas en Venta"
          value={formatNumber(realData ? realData.viviendasEnVenta : baseData.viviendas_en_venta)}
          trend={parseFloat(stockTrend.value)}
          trendLabel="vs trimestre anterior"
          icon={<Building className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="Precio Medio"
          value={formatEuro(realData ? realData.precioMedio : baseData.precio_medio)}
          trend={3.1}
          trendLabel="vs trimestre anterior"
          icon={<Home className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="Precio ‚Ç¨/m¬≤"
          value={formatEuro(realData ? realData.precioM2 : baseData.precio_m2)}
          trend={parseFloat(priceTrend.value)}
          trendLabel="vs trimestre anterior"
          icon={<DollarSign className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="Visitas/Anuncio"
          value={formatNumber(realData ? realData.visitasAnuncio : baseData.visitas_por_anuncio)}
          trend={5.8}
          trendLabel="vs trimestre anterior"
          icon={<Eye className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="D√≠as en Plataforma"
          value={(realData ? realData.diasPlataforma : baseData.dias_plataforma).toString()}
          trend={-8.7}
          trendLabel="vs trimestre anterior"
          icon={<Clock className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="Leads/Anuncio"
          value={(realData ? realData.leadsAnuncio : baseData.leads_por_anuncio).toString()}
          trend={parseFloat(leadsTrend.value)}
          trendLabel="vs trimestre anterior"
          icon={<Target className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
      </div>

      {/* M√©tricas adicionales - con datos reales */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <StatsCard
          title="Variaci√≥n vs 2007"
          value={`${variacionVs2007 > 0 ? '+' : ''}${variacionVs2007.toFixed(1)}%`}
          description="comparado con precrisis"
          icon={variacionVs2007 > 0 ? <TrendingUp className="h-4 w-4" /> : <TrendingDown className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="Variaci√≥n 12 meses"
          value={`+${realData ? realData.variacion12Meses : baseData.variacion_precio_12m}%`}
          description="√∫ltimos 12 meses"
          icon={<TrendingUp className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
        <StatsCard
          title="Descuento Negociaci√≥n"
          value={`${realData ? realData.descuentoNegociacion : baseData.descuento_negociacion}%`}
          description="promedio"
          icon={<DollarSign className="h-4 w-4" />}
          className="bg-slate-800/50 border-slate-700"
        />
      </div>

      {/* Trading Chart con datos reales */}
      <Card className="bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-slate-700">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="text-white flex items-center gap-2">
                Evoluci√≥n Precio Medio - Trading View
                {realData && <span className="text-xs bg-emerald-500 px-2 py-1 rounded">DATOS REALES</span>}
              </CardTitle>
              <CardDescription className="text-slate-400">
                An√°lisis t√©cnico - Salamanca District ({allHistoricalData.length} trimestres)
              </CardDescription>
            </div>
            <div className="flex gap-2">
              {(['1y', '2y', '5y', 'all'] as const).map((period) => (
                <Button
                  key={period}
                  variant={timeframe === period ? "default" : "outline"}
                  size="sm"
                  onClick={() => setTimeframe(period)}
                  className={timeframe === period ? 
                    "bg-emerald-600 text-white" : 
                    "border-slate-600 text-slate-300 hover:bg-slate-700"
                  }
                >
                  {period === 'all' ? 'Todo' : period.toUpperCase()}
                </Button>
              ))}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={filteredPriceData}>
              <defs>
                <linearGradient id="priceGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#10b981" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#10b981" stopOpacity={0.1}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis 
                dataKey="trimestre" 
                stroke="#9ca3af"
                fontSize={12}
              />
              <YAxis 
                stroke="#9ca3af"
                fontSize={12}
                tickFormatter={(value) => `${value/1000}k`}
              />
              <Tooltip 
                contentStyle={{
                  backgroundColor: '#1f2937',
                  border: '1px solid #374151',
                  borderRadius: '8px',
                  color: '#f9fafb'
                }}
                formatter={(value) => [`${formatEuro(value as number)}`, 'Precio Medio']}
              />
              <Line
                type="monotone"
                dataKey="valor"
                stroke="#10b981"
                strokeWidth={3}
                dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, fill: '#10b981' }}
                fill="url(#priceGradient)"
              />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Stock vs Leads Chart */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">
              Stock vs D√≠as Activos
              {historicoReal && <span className="text-xs bg-emerald-500 px-2 py-1 rounded ml-2">REAL</span>}
            </CardTitle>
            <CardDescription className="text-slate-400">√öltimos 8 trimestres</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={stockLeadsData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="trimestre" stroke="#9ca3af" />
                <YAxis yAxisId="left" stroke="#9ca3af" />
                <YAxis yAxisId="right" orientation="right" stroke="#9ca3af" />
                <Tooltip
                  contentStyle={{
                    backgroundColor: '#1f2937',
                    border: '1px solid #374151',
                    borderRadius: '8px',
                    color: '#f9fafb'
                  }}
                />
                <Legend />
                <Bar yAxisId="left" dataKey="stock" fill="#06b6d4" name="Stock Viviendas" />
                <Bar yAxisId="right" dataKey="leads" fill="#10b981" name="D√≠as Activos" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Hist√≥rico de Leads */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">
              Hist√≥rico D√≠as Activos
              {historicoReal && <span className="text-xs bg-emerald-500 px-2 py-1 rounded ml-2">REAL</span>}
            </CardTitle>
            <CardDescription className="text-slate-400">Evoluci√≥n √∫ltimos trimestres</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={leadsHistorico}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="trimestre" stroke="#9ca3af" />
                <YAxis stroke="#9ca3af" />
                <Tooltip
                  contentStyle={{
                    backgroundColor: '#1f2937',
                    border: '1px solid #374151',
                    borderRadius: '8px',
                    color: '#f9fafb'
                  }}
                  formatter={(value) => [`${value}`, 'D√≠as Activos']}
                />
                <Line
                  type="monotone"
                  dataKey="leads"
                  stroke="#8b5cf6"
                  strokeWidth={3}
                  dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 4 }}
                  activeDot={{ r: 6, fill: '#8b5cf6' }}
                />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Market Radar */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Radar de Mercado</CardTitle>
          <CardDescription className="text-slate-400">M√©tricas clave del mercado inmobiliario</CardDescription>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={400}>
            <RadarChart data={radarData}>
              <PolarGrid stroke="#374151" />
              <PolarAngleAxis dataKey="subject" tick={{ fill: '#9ca3af', fontSize: 12 }} />
              <PolarRadiusAxis angle={90} domain={[0, 10]} tick={{ fill: '#9ca3af', fontSize: 10 }} />
              <Radar name="Salamanca" dataKey="A" stroke="#8b5cf6" fill="#8b5cf6" fillOpacity={0.3} strokeWidth={2} />
            </RadarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  );
};
